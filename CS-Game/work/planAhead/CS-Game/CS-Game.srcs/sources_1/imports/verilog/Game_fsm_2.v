/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_fsm_2 (
    input clk,
    input rst,
    input [55:0] counter2,
    input [0:0] start,
    input button1,
    input button2,
    input button3,
    input button4,
    input button5,
    input button6,
    input button7,
    input button8,
    input button9,
    input button10,
    output reg [0:0] whetherstart,
    output reg [7:0] display,
    output reg out
  );
  
  
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_4 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_4 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_4 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_edge_detector4_out;
  reg [1-1:0] M_edge_detector4_in;
  edge_detector_4 edge_detector4 (
    .clk(clk),
    .in(M_edge_detector4_in),
    .out(M_edge_detector4_out)
  );
  wire [1-1:0] M_edge_detector5_out;
  reg [1-1:0] M_edge_detector5_in;
  edge_detector_4 edge_detector5 (
    .clk(clk),
    .in(M_edge_detector5_in),
    .out(M_edge_detector5_out)
  );
  wire [1-1:0] M_edge_detector6_out;
  reg [1-1:0] M_edge_detector6_in;
  edge_detector_4 edge_detector6 (
    .clk(clk),
    .in(M_edge_detector6_in),
    .out(M_edge_detector6_out)
  );
  wire [1-1:0] M_edge_detector7_out;
  reg [1-1:0] M_edge_detector7_in;
  edge_detector_4 edge_detector7 (
    .clk(clk),
    .in(M_edge_detector7_in),
    .out(M_edge_detector7_out)
  );
  wire [1-1:0] M_edge_detector8_out;
  reg [1-1:0] M_edge_detector8_in;
  edge_detector_4 edge_detector8 (
    .clk(clk),
    .in(M_edge_detector8_in),
    .out(M_edge_detector8_out)
  );
  wire [1-1:0] M_edge_detector9_out;
  reg [1-1:0] M_edge_detector9_in;
  edge_detector_4 edge_detector9 (
    .clk(clk),
    .in(M_edge_detector9_in),
    .out(M_edge_detector9_out)
  );
  wire [1-1:0] M_edge_detector10_out;
  reg [1-1:0] M_edge_detector10_in;
  edge_detector_4 edge_detector10 (
    .clk(clk),
    .in(M_edge_detector10_in),
    .out(M_edge_detector10_out)
  );
  wire [1-1:0] M_button_cond1_out;
  reg [1-1:0] M_button_cond1_in;
  button_conditioner_14 button_cond1 (
    .clk(clk),
    .in(M_button_cond1_in),
    .out(M_button_cond1_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_14 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_14 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_button_cond4_out;
  reg [1-1:0] M_button_cond4_in;
  button_conditioner_14 button_cond4 (
    .clk(clk),
    .in(M_button_cond4_in),
    .out(M_button_cond4_out)
  );
  wire [1-1:0] M_button_cond5_out;
  reg [1-1:0] M_button_cond5_in;
  button_conditioner_14 button_cond5 (
    .clk(clk),
    .in(M_button_cond5_in),
    .out(M_button_cond5_out)
  );
  wire [1-1:0] M_button_cond6_out;
  reg [1-1:0] M_button_cond6_in;
  button_conditioner_14 button_cond6 (
    .clk(clk),
    .in(M_button_cond6_in),
    .out(M_button_cond6_out)
  );
  wire [1-1:0] M_button_cond7_out;
  reg [1-1:0] M_button_cond7_in;
  button_conditioner_14 button_cond7 (
    .clk(clk),
    .in(M_button_cond7_in),
    .out(M_button_cond7_out)
  );
  wire [1-1:0] M_button_cond8_out;
  reg [1-1:0] M_button_cond8_in;
  button_conditioner_14 button_cond8 (
    .clk(clk),
    .in(M_button_cond8_in),
    .out(M_button_cond8_out)
  );
  wire [1-1:0] M_button_cond9_out;
  reg [1-1:0] M_button_cond9_in;
  button_conditioner_14 button_cond9 (
    .clk(clk),
    .in(M_button_cond9_in),
    .out(M_button_cond9_out)
  );
  wire [1-1:0] M_button_cond10_out;
  reg [1-1:0] M_button_cond10_in;
  button_conditioner_14 button_cond10 (
    .clk(clk),
    .in(M_button_cond10_in),
    .out(M_button_cond10_out)
  );
  localparam RANDOM_state = 3'd0;
  localparam GAME11_state = 3'd1;
  localparam GAME12_state = 3'd2;
  localparam WIN_state = 3'd3;
  localparam LOSE_state = 3'd4;
  localparam COMP_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = RANDOM_state;
  reg [15:0] M_targetnumber_d, M_targetnumber_q = 1'h0;
  reg [15:0] M_ra_d, M_ra_q = 1'h0;
  reg [15:0] M_rb_d, M_rb_q = 1'h0;
  reg [15:0] M_r1_d, M_r1_q = 1'h0;
  reg [15:0] M_r2_d, M_r2_q = 1'h0;
  reg [15:0] M_r3_d, M_r3_q = 1'h0;
  reg [15:0] M_r4_d, M_r4_q = 1'h0;
  reg [15:0] M_r5_d, M_r5_q = 1'h0;
  reg [15:0] M_r6_d, M_r6_q = 1'h0;
  reg [15:0] M_r7_d, M_r7_q = 1'h0;
  reg [15:0] M_r8_d, M_r8_q = 1'h0;
  reg [15:0] M_r9_d, M_r9_q = 1'h0;
  reg [15:0] M_r10_d, M_r10_q = 1'h0;
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  
  integer expected;
  
  always @* begin
    M_state_d = M_state_q;
    M_ra_d = M_ra_q;
    M_r6_d = M_r6_q;
    M_r7_d = M_r7_q;
    M_r8_d = M_r8_q;
    M_r9_d = M_r9_q;
    M_r1_d = M_r1_q;
    M_r2_d = M_r2_q;
    M_r3_d = M_r3_q;
    M_r10_d = M_r10_q;
    M_r4_d = M_r4_q;
    M_r5_d = M_r5_q;
    M_rb_d = M_rb_q;
    
    M_button_cond1_in = button1;
    M_button_cond2_in = button2;
    M_button_cond3_in = button3;
    M_button_cond4_in = button4;
    M_button_cond5_in = button5;
    M_button_cond6_in = button6;
    M_button_cond7_in = button7;
    M_button_cond8_in = button8;
    M_button_cond9_in = button9;
    M_button_cond10_in = button10;
    M_edge_detector1_in = M_button_cond1_out;
    M_edge_detector2_in = M_button_cond2_out;
    M_edge_detector3_in = M_button_cond3_out;
    M_edge_detector4_in = M_button_cond4_out;
    M_edge_detector5_in = M_button_cond5_out;
    M_edge_detector6_in = M_button_cond6_out;
    M_edge_detector7_in = M_button_cond7_out;
    M_edge_detector8_in = M_button_cond8_out;
    M_edge_detector9_in = M_button_cond9_out;
    M_edge_detector10_in = M_button_cond10_out;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    out = 1'h0;
    display = 1'h0;
    whetherstart = start;
    
    case (M_state_q)
      RANDOM_state: begin
        M_alu_a = M_ra_q;
        M_alu_b = M_rb_q;
        M_alu_alufn = M_alufn_q;
        display = 1'h0;
        if (start == 1'h1) begin
          M_state_d = GAME11_state;
        end
      end
      GAME11_state: begin
        if (M_edge_detector1_out && M_r1_q != 16'hffff) begin
          M_ra_d = 1'h1;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector2_out && M_r2_q != 16'hffff) begin
          M_ra_d = 2'h2;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector3_out && M_r3_q != 16'hffff) begin
          M_ra_d = 2'h3;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector4_out && M_r4_q != 16'hffff) begin
          M_ra_d = 3'h4;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector5_out && M_r5_q != 16'hffff) begin
          M_ra_d = 3'h5;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector6_out && M_r6_q != 16'hffff) begin
          M_ra_d = 3'h6;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector7_out && M_r7_q != 16'hffff) begin
          M_ra_d = 3'h7;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector8_out && M_r8_q != 16'hffff) begin
          M_ra_d = 4'h8;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector9_out && M_r9_q != 16'hffff) begin
          M_ra_d = 4'h9;
        end
        M_state_d = GAME12_state;
        if (M_edge_detector10_out && M_r10_q != 16'hffff) begin
          M_ra_d = 4'ha;
        end
        M_state_d = GAME12_state;
        if (counter2[0+0-:1] == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      GAME12_state: begin
        if (M_edge_detector1_out && M_ra_q != 1'h1 && M_r1_q != 16'hffff) begin
          M_rb_d = 1'h1;
        end
        M_state_d = COMP_state;
        if (M_edge_detector2_out && M_ra_q != 2'h2 && M_r2_q != 16'hffff) begin
          M_rb_d = 2'h2;
        end
        M_state_d = COMP_state;
        if (M_edge_detector3_out && M_ra_q != 2'h3 && M_r3_q != 16'hffff) begin
          M_rb_d = 2'h3;
        end
        M_state_d = COMP_state;
        if (M_edge_detector4_out && M_ra_q != 3'h4 && M_r4_q != 16'hffff) begin
          M_rb_d = 3'h4;
        end
        M_state_d = COMP_state;
        if (M_edge_detector5_out && M_ra_q != 3'h5 && M_r5_q != 16'hffff) begin
          M_rb_d = 3'h5;
        end
        M_state_d = COMP_state;
        if (M_edge_detector6_out && M_ra_q != 3'h6 && M_r6_q != 16'hffff) begin
          M_rb_d = 3'h6;
        end
        M_state_d = COMP_state;
        if (M_edge_detector7_out && M_ra_q != 3'h7 && M_r7_q != 16'hffff) begin
          M_rb_d = 3'h7;
        end
        M_state_d = COMP_state;
        if (M_edge_detector8_out && M_ra_q != 4'h8 && M_r8_q != 16'hffff) begin
          M_rb_d = 4'h8;
        end
        M_state_d = COMP_state;
        if (M_edge_detector9_out && M_ra_q != 4'h9 && M_r9_q != 16'hffff) begin
          M_rb_d = 4'h9;
        end
        M_state_d = COMP_state;
        if (M_edge_detector10_out && M_ra_q != 4'ha && M_r10_q != 16'hffff) begin
          M_rb_d = 4'ha;
        end
        M_state_d = COMP_state;
        if (counter2[0+0-:1] == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      COMP_state: begin
        M_alu_a = M_ra_q;
        M_alu_b = M_ra_q;
        M_alu_alufn = M_alufn_q;
        if (M_alu_out == M_targetnumber_q) begin
          if (M_ra_q == 1'h1) begin
            M_r1_d = 16'hffff;
          end
          if (M_ra_q == 2'h2) begin
            M_r2_d = 16'hffff;
          end
          if (M_ra_q == 2'h3) begin
            M_r3_d = 16'hffff;
          end
          if (M_ra_q == 3'h4) begin
            M_r4_d = 16'hffff;
          end
          if (M_ra_q == 3'h5) begin
            M_r5_d = 16'hffff;
          end
          if (M_ra_q == 3'h6) begin
            M_r6_d = 16'hffff;
          end
          if (M_ra_q == 3'h7) begin
            M_r7_d = 16'hffff;
          end
          if (M_ra_q == 4'h8) begin
            M_r8_d = 16'hffff;
          end
          if (M_ra_q == 4'h9) begin
            M_r9_d = 16'hffff;
          end
          if (M_ra_q == 4'ha) begin
            M_r10_d = 16'hffff;
          end
          if (M_rb_q == 1'h1) begin
            M_r1_d = 16'hffff;
          end
          if (M_rb_q == 2'h2) begin
            M_r2_d = 16'hffff;
          end
          if (M_rb_q == 2'h3) begin
            M_r3_d = 16'hffff;
          end
          if (M_rb_q == 3'h4) begin
            M_r4_d = 16'hffff;
          end
          if (M_rb_q == 3'h5) begin
            M_r5_d = 16'hffff;
          end
          if (M_rb_q == 3'h6) begin
            M_r6_d = 16'hffff;
          end
          if (M_rb_q == 3'h7) begin
            M_r7_d = 16'hffff;
          end
          if (M_rb_q == 4'h8) begin
            M_r8_d = 16'hffff;
          end
          if (M_rb_q == 4'h9) begin
            M_r9_d = 16'hffff;
          end
          if (M_rb_q == 4'ha) begin
            M_r10_d = 16'hffff;
          end
        end
        M_state_d = WIN_state;
      end
      WIN_state: begin
        display = 2'h3;
        if (start == 1'h1) begin
          M_state_d = RANDOM_state;
        end
      end
      LOSE_state: begin
        display = 2'h1;
        if (start == 1'h1) begin
          M_state_d = RANDOM_state;
        end
      end
      default: begin
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
        M_state_d = RANDOM_state;
        display = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_targetnumber_q <= 1'h0;
      M_ra_q <= 1'h0;
      M_rb_q <= 1'h0;
      M_r1_q <= 1'h0;
      M_r2_q <= 1'h0;
      M_r3_q <= 1'h0;
      M_r4_q <= 1'h0;
      M_r5_q <= 1'h0;
      M_r6_q <= 1'h0;
      M_r7_q <= 1'h0;
      M_r8_q <= 1'h0;
      M_r9_q <= 1'h0;
      M_r10_q <= 1'h0;
      M_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_targetnumber_q <= M_targetnumber_d;
      M_ra_q <= M_ra_d;
      M_rb_q <= M_rb_d;
      M_r1_q <= M_r1_d;
      M_r2_q <= M_r2_d;
      M_r3_q <= M_r3_d;
      M_r4_q <= M_r4_d;
      M_r5_q <= M_r5_d;
      M_r6_q <= M_r6_d;
      M_r7_q <= M_r7_d;
      M_r8_q <= M_r8_d;
      M_r9_q <= M_r9_d;
      M_r10_q <= M_r10_d;
      M_alufn_q <= M_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
