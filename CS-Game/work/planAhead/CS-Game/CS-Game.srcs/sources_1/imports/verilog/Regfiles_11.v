/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfiles_11 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] wdata,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] ra_data,
    output reg [15:0] rb_data
  );
  
  
  
  reg [15:0] M_temp_d, M_temp_q = 1'h0;
  reg [15:0] M_targetnumber_d, M_targetnumber_q = 1'h0;
  reg [0:0] M_opr_d, M_opr_q = 1'h0;
  reg [15:0] M_card_a_d, M_card_a_q = 1'h0;
  reg [15:0] M_card_b_d, M_card_b_q = 1'h0;
  reg [15:0] M_card_a_index_d, M_card_a_index_q = 1'h0;
  reg [15:0] M_card_b_index_d, M_card_b_index_q = 1'h0;
  reg [127:0] M_r_d, M_r_q = 1'h0;
  
  always @* begin
    M_card_b_index_d = M_card_b_index_q;
    M_r_d = M_r_q;
    M_card_b_d = M_card_b_q;
    M_card_a_d = M_card_a_q;
    M_temp_d = M_temp_q;
    M_targetnumber_d = M_targetnumber_q;
    M_opr_d = M_opr_q;
    M_card_a_index_d = M_card_a_index_q;
    
    ra_data = 1'h0;
    rb_data = 1'h0;
    if (rst) begin
      M_r_d = 128'h0fff0fff0fff0fff0fff0fff0fff0fff;
    end
    if (we) begin
      if (write_address < 3'h7) begin
        M_r_d[(write_address)*16+15-:16] = wdata;
      end else begin
        
        case (write_address)
          4'hf: begin
            M_targetnumber_d = wdata;
          end
          4'h8: begin
            M_opr_d = wdata;
          end
          4'h9: begin
            M_card_a_index_d = wdata;
          end
          4'ha: begin
            M_card_b_index_d = wdata;
          end
          4'hc: begin
            M_temp_d = wdata;
          end
          4'hd: begin
            M_card_a_d = wdata;
          end
          4'he: begin
            M_card_b_d = wdata;
          end
        endcase
      end
    end
    if (read_address_a < 3'h7) begin
      ra_data = M_r_q[(read_address_a)*16+15-:16];
    end else begin
      
      case (read_address_a)
        4'hf: begin
          ra_data = M_targetnumber_q;
        end
        4'h8: begin
          ra_data = M_opr_q;
        end
        4'h9: begin
          ra_data = M_card_a_index_q;
        end
        4'ha: begin
          ra_data = M_card_b_index_q;
        end
        4'hc: begin
          ra_data = M_temp_q;
        end
        4'hd: begin
          ra_data = M_card_a_q;
        end
        4'he: begin
          ra_data = M_card_b_q;
        end
      endcase
    end
    if (read_address_b < 3'h7) begin
      rb_data = M_r_q[(read_address_b)*16+15-:16];
    end else begin
      
      case (read_address_b)
        4'hf: begin
          rb_data = M_targetnumber_q;
        end
        4'h8: begin
          rb_data = M_opr_q;
        end
        4'h9: begin
          rb_data = M_card_a_index_q;
        end
        4'ha: begin
          rb_data = M_card_b_index_q;
        end
        4'hc: begin
          ra_data = M_temp_q;
        end
        4'hd: begin
          rb_data = M_card_a_q;
        end
        4'he: begin
          rb_data = M_card_b_q;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_temp_q <= 1'h0;
      M_targetnumber_q <= 1'h0;
      M_opr_q <= 1'h0;
      M_card_a_q <= 1'h0;
      M_card_b_q <= 1'h0;
      M_card_a_index_q <= 1'h0;
      M_card_b_index_q <= 1'h0;
      M_r_q <= 1'h0;
    end else begin
      M_temp_q <= M_temp_d;
      M_targetnumber_q <= M_targetnumber_d;
      M_opr_q <= M_opr_d;
      M_card_a_q <= M_card_a_d;
      M_card_b_q <= M_card_b_d;
      M_card_a_index_q <= M_card_a_index_d;
      M_card_b_index_q <= M_card_b_index_d;
      M_r_q <= M_r_d;
    end
  end
  
endmodule
