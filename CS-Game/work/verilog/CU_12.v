/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_12 (
    input clk,
    input rst,
    input timer,
    input [31:0] ran,
    input [15:0] ra_data,
    input [15:0] rb_data,
    input start,
    input [7:0] button,
    output reg [127:0] s_seg_display,
    output reg [15:0] target_display,
    output reg [0:0] opr_display,
    output reg [5:0] alufn,
    output reg [1:0] wdsel,
    output reg [3:0] write_address,
    output reg we,
    output reg [15:0] cu_output_data,
    output reg [3:0] read_address_a,
    output reg [3:0] read_address_b,
    output reg timer_start
  );
  
  
  
  reg [127:0] M_s_seg_display_dff_d, M_s_seg_display_dff_q = 1'h0;
  reg [15:0] M_target_display_dff_d, M_target_display_dff_q = 1'h0;
  reg [0:0] M_opr_display_dff_d, M_opr_display_dff_q = 1'h0;
  reg [29:0] M_little_timer_d, M_little_timer_q = 1'h0;
  reg [19:0] M_numIncre_d, M_numIncre_q = 1'h0;
  localparam IDLE_state = 5'd0;
  localparam RANDOM_TARGET_state = 5'd1;
  localparam INIT_ADD_state = 5'd2;
  localparam INIT_SUBSTRACT_state = 5'd3;
  localparam RANDOM_CARDS1_ADD_state = 5'd4;
  localparam RANDOM_CARDS1_SUB_state = 5'd5;
  localparam TEST_state = 5'd6;
  localparam RANDOM_CARDS2_ADD_state = 5'd7;
  localparam RANDOM_CARDS2_SUB_state = 5'd8;
  localparam GAME11_state = 5'd9;
  localparam GAME12_state = 5'd10;
  localparam GAME21_state = 5'd11;
  localparam GAME22_state = 5'd12;
  localparam CHECKOP_state = 5'd13;
  localparam ADD_state = 5'd14;
  localparam SUB_state = 5'd15;
  localparam COMP_state = 5'd16;
  localparam DISPLAY_state = 5'd17;
  localparam UNPAIRED_state = 5'd18;
  localparam WIN_state = 5'd19;
  localparam LOSE_state = 5'd20;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  integer i;
  
  always @* begin
    M_state_d = M_state_q;
    M_target_display_dff_d = M_target_display_dff_q;
    M_little_timer_d = M_little_timer_q;
    M_s_seg_display_dff_d = M_s_seg_display_dff_q;
    M_numIncre_d = M_numIncre_q;
    M_opr_display_dff_d = M_opr_display_dff_q;
    
    s_seg_display = M_s_seg_display_dff_q;
    target_display = M_target_display_dff_q;
    opr_display = M_opr_display_dff_q[0+0-:1];
    timer_start = 1'h0;
    alufn = 1'h0;
    wdsel = 1'h0;
    write_address = 1'h0;
    we = 1'h0;
    read_address_a = 1'h0;
    read_address_b = 1'h0;
    cu_output_data = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        M_s_seg_display_dff_d = 128'h00000000000000000000000000000000;
        M_target_display_dff_d = 1'h0;
        M_opr_display_dff_d[0+0-:1] = 1'h0;
        if (start == 1'h1) begin
          M_state_d = RANDOM_TARGET_state;
        end
      end
      RANDOM_TARGET_state: begin
        M_s_seg_display_dff_d = 128'h00010001000100010001000100010001;
        if (ran[0+3-:4] <= 4'hc && ran[0+3-:4] >= 3'h7) begin
          M_opr_display_dff_d[0+0-:1] = 1'h1;
          wdsel = 2'h3;
          write_address = 4'hf;
          we = 1'h1;
          cu_output_data = ran[0+3-:4];
          M_numIncre_d = 1'h0;
          M_target_display_dff_d = ran[0+3-:4];
          M_state_d = INIT_ADD_state;
        end
        if (ran[0+3-:4] <= 3'h6 && ran[0+3-:4] >= 1'h0) begin
          M_opr_display_dff_d[0+0-:1] = 1'h0;
          wdsel = 2'h3;
          write_address = 4'hf;
          we = 1'h1;
          cu_output_data = ran[0+3-:4];
          M_numIncre_d = 1'h0;
          M_target_display_dff_d = ran[0+3-:4];
          M_state_d = INIT_SUBSTRACT_state;
        end
      end
      INIT_ADD_state: begin
        M_s_seg_display_dff_d = 128'h00040004000400040004000400040004;
        wdsel = 2'h3;
        write_address = 4'h8;
        we = 1'h1;
        cu_output_data = 1'h1;
        M_state_d = RANDOM_CARDS1_ADD_state;
      end
      INIT_SUBSTRACT_state: begin
        M_s_seg_display_dff_d = 128'h00040004000400040004000400040004;
        wdsel = 2'h3;
        write_address = 4'h8;
        we = 1'h1;
        cu_output_data = 1'h0;
        M_state_d = RANDOM_CARDS1_SUB_state;
      end
      RANDOM_CARDS1_ADD_state: begin
        if (ran[0+3-:4] >= 1'h0 && ran[0+3-:4] <= 3'h7) begin
          read_address_a = ran[0+3-:4];
          if (M_s_seg_display_dff_q[(ran[0+3-:4])*16+15-:16] == 4'h4) begin
            M_s_seg_display_dff_d[(ran[0+3-:4])*16+15-:16] = 4'h5;
            wdsel = 2'h3;
            write_address = ran[0+3-:4];
            we = 1'h1;
            cu_output_data = M_numIncre_q + 2'h3;
            M_numIncre_d = M_numIncre_q + 1'h1;
            if (M_numIncre_q == 2'h3) begin
              M_numIncre_d = 2'h3;
              M_state_d = RANDOM_CARDS2_ADD_state;
            end
          end
        end
      end
      RANDOM_CARDS1_SUB_state: begin
        if (ran[0+3-:4] >= 1'h0 && ran[0+3-:4] <= 3'h7) begin
          read_address_a = ran[0+3-:4];
          if (M_s_seg_display_dff_q[(ran[0+3-:4])*16+15-:16] == 4'h4) begin
            M_s_seg_display_dff_d[(ran[0+3-:4])*16+15-:16] = 4'h5;
            wdsel = 2'h3;
            write_address = ran[0+3-:4];
            we = 1'h1;
            cu_output_data = M_numIncre_q;
            M_numIncre_d = M_numIncre_q + 1'h1;
            if (M_numIncre_q == 2'h3) begin
              M_numIncre_d = 2'h3;
              M_state_d = RANDOM_CARDS2_SUB_state;
            end
          end
        end
      end
      TEST_state: begin
        M_state_d = TEST_state;
      end
      RANDOM_CARDS2_ADD_state: begin
        if (ran[0+3-:4] >= 1'h0 && ran[0+3-:4] <= 3'h7) begin
          read_address_a = ran[0+3-:4];
          read_address_b = 4'hf;
          if (M_s_seg_display_dff_q[(ran[0+3-:4])*16+15-:16] == 4'h4) begin
            M_s_seg_display_dff_d[(ran[0+3-:4])*16+15-:16] = 4'h5;
            wdsel = 2'h3;
            write_address = ran[0+3-:4];
            we = 1'h1;
            cu_output_data = M_target_display_dff_q - M_numIncre_q - 2'h3;
            M_numIncre_d = M_numIncre_q - 1'h1;
            if (M_numIncre_q == 1'h0) begin
              M_numIncre_d = 1'h0;
              timer_start = 1'h1;
              M_s_seg_display_dff_d = 128'h00140014001400140014001400140014;
              M_state_d = GAME11_state;
            end
          end
        end
      end
      RANDOM_CARDS2_SUB_state: begin
        if (ran[0+3-:4] >= 1'h0 && ran[0+3-:4] <= 3'h7) begin
          read_address_a = ran[0+3-:4];
          read_address_b = 4'hf;
          if (M_s_seg_display_dff_q[(ran[0+3-:4])*16+15-:16] == 4'h4) begin
            M_s_seg_display_dff_d[(ran[0+3-:4])*16+15-:16] = 4'h5;
            wdsel = 2'h3;
            write_address = ran[0+3-:4];
            we = 1'h1;
            cu_output_data = M_target_display_dff_q + M_numIncre_q;
            M_numIncre_d = M_numIncre_q - 1'h1;
            if (M_numIncre_q == 1'h0) begin
              M_numIncre_d = 1'h0;
              timer_start = 1'h1;
              M_s_seg_display_dff_d = 128'h00140014001400140014001400140014;
              M_state_d = GAME11_state;
            end
          end
        end
      end
      GAME11_state: begin
        for (i = 1'h0; i < 4'h8; i = i + 1) begin
          if (button[(i)*1+0-:1]) begin
            read_address_a = i;
            if (M_s_seg_display_dff_q[(i)*16+15-:16] == 5'h14) begin
              wdsel = 2'h3;
              write_address = 4'h9;
              we = 1'h1;
              cu_output_data = i;
              M_s_seg_display_dff_d[(i)*16+15-:16] = ra_data;
              M_state_d = GAME12_state;
            end
          end
        end
        if (timer == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      GAME12_state: begin
        read_address_a = 4'h9;
        read_address_b = ra_data;
        write_address = 4'hd;
        cu_output_data = rb_data;
        we = 1'h1;
        wdsel = 2'h3;
        M_state_d = GAME21_state;
      end
      GAME21_state: begin
        for (i = 1'h0; i < 4'h8; i = i + 1) begin
          if (button[(i)*1+0-:1]) begin
            read_address_a = i;
            read_address_b = 4'h9;
            if (M_s_seg_display_dff_q[(i)*16+15-:16] == 5'h14 && rb_data != i) begin
              wdsel = 2'h3;
              write_address = 4'ha;
              we = 1'h1;
              cu_output_data = i;
              M_s_seg_display_dff_d[(i)*16+15-:16] = ra_data;
              M_state_d = GAME22_state;
            end
          end
        end
        if (timer == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      GAME22_state: begin
        read_address_a = 4'ha;
        read_address_b = ra_data;
        write_address = 4'he;
        cu_output_data = rb_data;
        we = 1'h1;
        wdsel = 2'h3;
        M_state_d = CHECKOP_state;
      end
      CHECKOP_state: begin
        read_address_a = 4'h8;
        if (ra_data == 1'h1) begin
          M_state_d = ADD_state;
        end
        if (ra_data == 1'h0) begin
          M_state_d = SUB_state;
        end
      end
      ADD_state: begin
        read_address_a = 4'hd;
        read_address_b = 4'he;
        alufn = 6'h00;
        we = 1'h1;
        wdsel = 2'h0;
        write_address = 4'hc;
        M_state_d = COMP_state;
      end
      SUB_state: begin
        read_address_a = 4'hd;
        read_address_b = 4'he;
        alufn = 6'h01;
        we = 1'h1;
        wdsel = 2'h0;
        write_address = 4'hc;
        M_state_d = COMP_state;
      end
      COMP_state: begin
        read_address_a = 4'hc;
        read_address_b = 4'hf;
        alufn = 6'h33;
        we = 1'h1;
        wdsel = 2'h0;
        write_address = 4'hc;
        M_little_timer_d = 1'h0;
        M_state_d = DISPLAY_state;
      end
      DISPLAY_state: begin
        M_little_timer_d = M_little_timer_q + 1'h1;
        if (M_little_timer_q[25+0-:1] == 1'h1) begin
          read_address_a = 4'hc;
          if (ra_data) begin
            M_numIncre_d = M_numIncre_q + 1'h1;
            if (M_numIncre_q == 2'h3) begin
              M_state_d = WIN_state;
            end else begin
              M_state_d = GAME11_state;
            end
          end else begin
            M_state_d = UNPAIRED_state;
          end
        end
      end
      UNPAIRED_state: begin
        read_address_a = 4'h9;
        read_address_b = 4'ha;
        M_s_seg_display_dff_d[(ra_data)*16+15-:16] = 5'h14;
        M_s_seg_display_dff_d[(rb_data)*16+15-:16] = 5'h14;
        M_state_d = GAME11_state;
      end
      WIN_state: begin
        M_s_seg_display_dff_d[0+15-:16] = 4'ha;
        M_s_seg_display_dff_d[32+15-:16] = 4'hb;
        M_s_seg_display_dff_d[64+15-:16] = 4'hc;
        M_s_seg_display_dff_d[96+15-:16] = 4'hc;
        M_s_seg_display_dff_d[16+15-:16] = 5'h14;
        M_s_seg_display_dff_d[48+15-:16] = 5'h14;
        M_s_seg_display_dff_d[80+15-:16] = 5'h14;
        M_s_seg_display_dff_d[112+15-:16] = 5'h14;
      end
      LOSE_state: begin
        M_s_seg_display_dff_d[0+15-:16] = 4'hd;
        M_s_seg_display_dff_d[32+15-:16] = 4'hb;
        M_s_seg_display_dff_d[64+15-:16] = 4'he;
        M_s_seg_display_dff_d[96+15-:16] = 4'hf;
        M_s_seg_display_dff_d[16+15-:16] = 5'h14;
        M_s_seg_display_dff_d[48+15-:16] = 5'h14;
        M_s_seg_display_dff_d[80+15-:16] = 5'h14;
        M_s_seg_display_dff_d[112+15-:16] = 5'h14;
      end
      default: begin
        M_state_d = IDLE_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_s_seg_display_dff_q <= 1'h0;
      M_target_display_dff_q <= 1'h0;
      M_opr_display_dff_q <= 1'h0;
      M_little_timer_q <= 1'h0;
      M_numIncre_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_s_seg_display_dff_q <= M_s_seg_display_dff_d;
      M_target_display_dff_q <= M_target_display_dff_d;
      M_opr_display_dff_q <= M_opr_display_dff_d;
      M_little_timer_q <= M_little_timer_d;
      M_numIncre_q <= M_numIncre_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
