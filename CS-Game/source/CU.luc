module game_CU (
    input clk,  // clock
    input rst,  // reset
    input timer,
    input ran[32],
    input ra_data[16], // direct radata from regfile
    input rb_data[16],
    input start,
    input button[8],
    
    output s_seg_display[8][16], // display for seven segments of 8 card numbers
    output target_display[16], // display for seven segments of target nuber
    output opr_display_add[1], // display for addition operation LED
    output opr_display_sub[1], // display for substraction operation LED
    output alufn[6],
    output wdsel[2],
    output write_address[4], // write address
    output we, // write enable signel
    output cu_output_data[16], //output of random gen(from CU)
    
    // two read port
    output read_address_a[4], // read address a 
    output read_address_b[4], // read address b
    output timer_start,
    output end_digit[4]  // to tell the timer to start counting
  ) {
  .clk(clk){
 
    .rst(rst){
    dff s_seg_display_dff[8][16];
    dff target_display_dff[16];
    dff opr_display_dff[2];
    dff end_digit_dff[4];
    dff little_timer[30];
    dff numIncre[20];
    fsm state = {IDLE, RANDOM_TARGET,INIT_ADD, INIT_SUBSTRACT, 
    RANDOM_CARDS1_ADD,RANDOM_CARDS1_SUB, TEST, RANDOM_CARDS2_ADD,RANDOM_CARDS2_SUB,
    GAME11,GAME12,GAME21,GAME22,CHECKOP,ADD,SUB,COMP,DISPLAY, UNPAIRED, WIN, LOSE };
    }}
  var i;
  always {
    s_seg_display = s_seg_display_dff.q;
    target_display = target_display_dff.q;  
    if (opr_display_dff.q == b1){
      opr_display_add[0] = b1;
      opr_display_sub[0] = b0;
    } else if (opr_display_dff.q == 2){
      opr_display_add[0] = b0;
      opr_display_sub[0] = b1;
    } else {
      opr_display_add[0] = b0;
      opr_display_sub[0] = b0;
    }     
    timer_start = 0;
    end_digit = end_digit_dff.q;   
    
    alufn = 0;
    wdsel = 0;
    write_address = 0;
    we = 0;
    read_address_a = 0;
    read_address_b = 0;
    cu_output_data = 0;
    
    case(state.q){
      state.IDLE:
        s_seg_display_dff.d = 8x{{16h0}}; // init all the 7 segment display 
        target_display_dff.d = 0;
        opr_display_dff.d = 0;
        if (end_digit_dff.q == 0)
          end_digit_dff.d = 7;
        if (start == b1) 
         state.d = state.RANDOM_TARGET;
                
      state.RANDOM_TARGET:
        s_seg_display_dff.d = 8x{{16h1}};
        if (ran[3:0]<=12 && ran[3:0]>=7){ // if random to add operation 
          opr_display_dff.d = 1; 
          wdsel = b11;
          write_address = b1111;
          we = 1;
          cu_output_data = ran[3:0];
          numIncre.d = 0;
          target_display_dff.d = ran[3:0];
          state.d = state.INIT_ADD;
          }
        if (ran[3:0]<=6 && ran[3:0]>=0){ // if random to substract operation
          opr_display_dff.d = 2;
          wdsel = b11;
          write_address = b1111;
          we = 1;
          cu_output_data = ran[3:0];
          numIncre.d = 0;   
          target_display_dff.d = ran[3:0];     
          state.d = state.INIT_SUBSTRACT;
          } 
            
      state.INIT_ADD:
        s_seg_display_dff.d = 8x{{16h4}};
        wdsel = b11;
        write_address = b1000;
        we = 1;
        cu_output_data = b1;
        state.d = state.RANDOM_CARDS1_ADD;  
      
      state.INIT_SUBSTRACT:
        s_seg_display_dff.d = 8x{{16h4}};
        wdsel = b11;
        write_address = b1000;
        we = 1;
        cu_output_data = b0;          
        state.d = state.RANDOM_CARDS1_SUB;  
        
      state.RANDOM_CARDS1_ADD:  
        if (ran[3:0]>=0 && ran[3:0]<=7){
          read_address_a = ran[3:0];
          if (s_seg_display_dff.q[ran[3:0]] == h4) {
            s_seg_display_dff.d[ran[3:0]] = h5;
            wdsel = b11;
            write_address = ran[3:0];
            we = 1;
            cu_output_data = numIncre.q + 3;
            numIncre.d = numIncre.q + 1;
            if (numIncre.q==3){
              numIncre.d =3;
              state.d = state.RANDOM_CARDS2_ADD;
            }  
          }
          
        }
        
      state.RANDOM_CARDS1_SUB:
        if (ran[3:0]>=0 && ran[3:0]<=7){
          read_address_a = ran[3:0];
          if (s_seg_display_dff.q[ran[3:0]] == h4) {
            s_seg_display_dff.d[ran[3:0]] = h5;
            wdsel = b11;
            write_address = ran[3:0];
            we = 1;
            cu_output_data = numIncre.q;
            numIncre.d = numIncre.q + 1;
            if (numIncre.q==3){
              numIncre.d = 3;
              state.d = state.RANDOM_CARDS2_SUB;
            }
          }
          
        }           
         
      state.TEST:
        state.d = state.TEST;
        
      state.RANDOM_CARDS2_ADD:
        
        if (ran[3:0]>=0 && ran[3:0]<=7){
          read_address_a = ran[3:0];
          read_address_b = b1111;
          if (s_seg_display_dff.q[ran[3:0]] == h4){
          // if addition, distribute targetnumber-numIncre to a random location
            s_seg_display_dff.d[ran[3:0]] = h5;
            wdsel = b11;
            write_address = ran[3:0];
            we = 1;
            cu_output_data = target_display_dff.q - numIncre.q - 3; 
            numIncre.d = numIncre.q - 1;  
            if (numIncre.q == 0) // at the same time, the use for numIncre becomes count of number of cards that are paired 
              {
              numIncre.d = 0;
              timer_start = 1; // start the timer
              s_seg_display_dff.d = 8x{{16h14}}; // write 20 to display(which is null)
              state.d = state.GAME11;  // all INIT finished, start the game              
              }
            
          }    
        }
              
       
      state.RANDOM_CARDS2_SUB:  
          
        if (ran[3:0]>=0 && ran[3:0]<=7){
          read_address_a = ran[3:0];
          read_address_b = b1111;
          if (s_seg_display_dff.q[ran[3:0]] == h4){
          // if substraction, distribute targetnumber+numIncre to a random location 
            s_seg_display_dff.d[ran[3:0]] = h5;
            wdsel = b11;
            write_address = ran[3:0];
            we = 1;
            cu_output_data = target_display_dff.q + numIncre.q; 
            numIncre.d = numIncre.q - 1; 
            if (numIncre.q == 0){
              numIncre.d =0;
              timer_start = 1; // start the timer
              s_seg_display_dff.d = 8x{{16h14}} ; // write 20 to display(which is null)
              state.d = state.GAME11; // all INIT finished, start the game
            }  
          }    
        }
          
      
      state.GAME11: // GAME start
        for (i=0;i<8;i++)
          if (button[i]){
            read_address_a = i;
            if (s_seg_display_dff.q[i] == 20){
              wdsel = b11;
              write_address = b1001; // save the ra index
              we = 1;
              cu_output_data = i;
              s_seg_display_dff.d[i] = ra_data;
              state.d = state.GAME12;
            }  
          }  
        
        if(timer == 1)
          state.d = state.LOSE;
        
      state.GAME12:
        read_address_a = b1001; // read the first chosen card index from ra port
        read_address_b = ra_data; // send the index to read address b
        write_address =  b1101; // write the number(content) of first chosen card into the regFile
        cu_output_data = rb_data; // output the number from read port b
        we = 1;
        wdsel = b11;
        state.d = state.GAME21;
        
       
     state.GAME21:
        for (i=0;i<8;i++)
          if (button[i]){
            read_address_a = i;
            read_address_b = b1001;
            if (s_seg_display_dff.q[i] == 20 && rb_data != i){
              wdsel = b11;
              write_address = b1010;
              we = 1;
              cu_output_data = i;
              s_seg_display_dff.d[i] = ra_data;
              state.d = state.GAME22;
            }  
          }  
        
        if(timer == 1)
          state.d = state.LOSE;
          
      state.GAME22:
        read_address_a = b1010;
        read_address_b = ra_data;
        write_address =  b1110;
        cu_output_data = rb_data;
        we = 1;
        wdsel = b11;
        state.d = state.CHECKOP;      
     
      state.CHECKOP:
        read_address_a = b1000;
        if( ra_data == 1)
          state.d = state.ADD;
        if( ra_data == 0)
          state.d = state.SUB;
             
      state.ADD:
        read_address_a = b1101;
        read_address_b = b1110;
        alufn = b000000;
        we = 1;
        wdsel = b00;
        write_address = b1100;
        state.d = state.COMP;
        
      state.SUB:
        read_address_a = b1101;
        read_address_b = b1110;
        alufn = b000001;
        we = 1;
        wdsel = b00;
        write_address = b1100;
        state.d = state.COMP;
        
      state.COMP:
        read_address_a = b1100;
        read_address_b = b1111;
        alufn = b110011;
        we = 1;
        wdsel = b00;
        write_address = b1100;
        little_timer.d = 0;
        
        state.d = state.DISPLAY;
      
      state.DISPLAY:
        little_timer.d = little_timer.q + 1;
  
        if (little_timer.q[25] == 1) {
          read_address_a = b1100; // read the result of compare
          if (ra_data){
            numIncre.d = numIncre.q+1;
            if (numIncre.q == 3)
              state.d = state.WIN;
            else
              state.d = state.GAME11;  
          }else
            state.d = state.UNPAIRED;  
          }  
        
      state.UNPAIRED:
        read_address_a = b1001; // read ra_index
        read_address_b = b1010; // read rb_index
        s_seg_display_dff.d[ra_data] = 20;
        s_seg_display_dff.d[rb_data] = 20;
        state.d = state.GAME11; 
        
      state.WIN:
        s_seg_display_dff.d[3] = 10;
        s_seg_display_dff.d[4] = 11;
        s_seg_display_dff.d[5] = 12;
        s_seg_display_dff.d[6] = 12;
        s_seg_display_dff.d[0] = 8 - end_digit_dff.q;
        s_seg_display_dff.d[1] = 15;
        s_seg_display_dff.d[2] = 20;
        s_seg_display_dff.d[7] = 20;
        if ( start == b1){
          if (end_digit_dff.q > 3) 
            end_digit_dff.d = end_digit_dff.q - 1;
          state.d = state.RANDOM_TARGET;
        }
        
        
      state.LOSE:
        s_seg_display_dff.d[3] = 13;
        s_seg_display_dff.d[4] = 11;
        s_seg_display_dff.d[5] = 14;
        s_seg_display_dff.d[6] = 15;            
        s_seg_display_dff.d[0] = 8 - end_digit_dff.q;
        s_seg_display_dff.d[1] = 15;
        s_seg_display_dff.d[2] = 20;
        s_seg_display_dff.d[7] = 20;
        if ( start == b1){
          end_digit_dff.d = 7;
          state.d = state.RANDOM_TARGET;
        }
        
      default:
        state.d = state.IDLE;  
              
    }
  }

}

