module miniBeta (
    input button[8], //button input
    input clk,  // clock
    input rst,  // reset
    
    output s_seg_display[8][16], // display for seven segments of 8 card numbers
    output target_display[16], // display for seven segments of target nuber
    output out
  ) {
  
  alu game_alu;
  
  .clk(clk){
    edge_detector edge_detector[8](#RISE(1), #FALL(0));
    button_conditioner button_cond[8];
    timer timer;
  .rst(rst){
    pn_gen ran;
    regfiles game_regfiles;
    game_CU game_controlunit;    
    }
  } 
  
  var i;
  
  always {
    out = 0;
    s_seg_display = 8x{{16h0014}};
    target_display = 0;
    for (i = 0; i<8; i++)
      button_cond.in[i] = button[i];
    for (i = 0; i<8; i++)
      edge_detector.in[i] = button_cond.out[i];
    
    //----------CU---------------
    //pass reset to start
    game_controlunit.start = edge_detector.out[0];
    
    //pass random gn to cu 
    ran.seed = 1;
    ran.next = 1;
    game_controlunit.ran = ran.num;
    
    //pass button press signal to cu
    game_controlunit.button = edge_detector.out;
    
    //pass radata and rbdata to cu 
    game_controlunit.ra_data = game_regfiles.ra_data;
    game_controlunit.rb_data = game_regfiles.rb_data;
    
    //output of cu to 7segments
    s_seg_display = game_controlunit.s_seg_display;
    target_display = game_controlunit.target_display;
    
    //pass timer to cu
    game_controlunit.timer = timer.out;
    
    //pass start signal to timer
    timer.rst = game_controlunit.timer_start;
    //---------Regfiles-----------
    //setup REGFILE unit 
    game_regfiles.we = game_controlunit.we;
    game_regfiles.write_address = game_controlunit.write_address;
    
    game_regfiles.read_address_a = game_controlunit.read_address_a;
    game_regfiles.read_address_b = game_controlunit.read_address_b;
    
    //---------ALU----------------
    game_alu.a = game_regfiles.ra_data;
    game_alu.b = game_regfiles.rb_data;
    game_alu.alufn = game_controlunit.alufn; 
    
    //---------Wdsel---------------
    case(game_controlunit.wdsel){
      b00: game_regfiles.wdata = game_alu.out;
      b01: game_regfiles.wdata = 0;
      b10: game_regfiles.wdata = hFFFF;
      b11: game_regfiles.wdata = game_controlunit.cu_output_data;
      default : // b00
        game_regfiles.wdata = game_alu.out;
    }
    
    
  }
}
