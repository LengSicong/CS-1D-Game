module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    // led[2:0] utilized as our external 7 segment selector
    output led [8],         // 8 user controllable LEDs //
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    //output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8],     // DIP switches on IO Shield
    
    input button[8],
    output target[2][7], // target numbersDisplay
    output display_seg[7]
    //output display_sel[3]
     
) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){

      miniBeta beta;
      multi_seven_seg numbersDisplay; // 7 segment display of the 8 numbers
      
    }
  }
  seven_seg seven_seg1;
  seven_seg seven_seg2;
  var i;
  
  always {
    
    //io_led[2] = 0;
    //io_led[1] = 0;
    //io_led[0] =0;
    
        
    for (i=0; i<8;i++)
      beta.button[i] = button[i];
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;            // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    for (i=0;i<8;i++)
      //numbersDisplay.values[i] = 8;
      numbersDisplay.values[i] = beta.s_seg_display[i];
    
    display_seg = ~numbersDisplay.seg;
    led[2:0] = ~numbersDisplay.sel;
    
    if (beta.target_display>9){
      seven_seg1.char = beta.target_display-10;
      target[0] = ~seven_seg1.segs;
      seven_seg2.char = 1;
      target[1] = ~seven_seg2.segs;
      } else{
      seven_seg1.char = beta.target_display;
      target[0] = ~seven_seg1.segs;
      seven_seg2.char = 0;
      target[1] = ~seven_seg2.segs;
    }  
    
  
  }
}  