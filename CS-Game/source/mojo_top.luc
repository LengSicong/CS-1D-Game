module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    output target[2][7],  // target numbersDisplay
    output display_seg[8], // 8 numbers' segment display
    output display_sel[3]  // 8 numbers' digit select
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      pn_gen ran;
      game_fsm game; //initializing Game_fsm named gmae
      multi_seven_seg numbersDisplay; // 7 segment display of the 8 numbers
      dff counter2[56]; // for common time count
      //dff r11[16];
      //dff r12[16];
    }
  }
  var i;
  
  always {
    
    io_led[2] = 0;
    io_led[1] = 0;
    io_led[0] =0;
    ran.seed = 1;
    ran.next = 1;
    game.ran = ran.num;
    
    for (i=0; i<8;i++)
      game.button[i] = 0;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;            // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    game.counter2 = counter2.q; //feed the counter1 to game
    
    for (i=0;i<8;i++)
      numbersDisplay.values[i] = game.target_display[i];
    
    display_seg = numbersDisplay.seg;
    display_sel = numbersDisplay.sel;  
    if (game.target_display>=9){
      target[0] = game.target_display-10;
      target[1] = 1;
      } else{
      target[0] = game.target_display;
      target[1] = 0;
    }  
      
    if(io_dip[0][0]) //use DIP switch[0][0] to start
      game.start = b1;
    else
      game.start = b0;
      
    counter2.d = counter2.q + 1;
    
  }
}  